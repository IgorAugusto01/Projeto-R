ggplot(aes(x = height, color = sex)) +
geom_density()
starwars %>%
ggplot(aes(x = height, color = "sex")) +
geom_density() +
scale_color_manual(values = "sex" = "blue")
starwars %>%
ggplot(aes(x = height, color = "sex")) +
geom_density() +
scale_color_manual(values =c("sex" = "blue"))
labs(
title = "Distribuição de altura por sexo",
subtitle = "Conjunto de dados starwars",
x = "altura (em cm)",
y = "Densidade",
caption = "Nota de rodapé"
) + theme_minimal()
library(Rcpp)
cppFunction('
int soma(int x, int y) {
return x + y;
}
')
library(Rcpp)
cppFunction('
int soma(int x, int y) {
return x + y;
}
')
ggplot(brasil, aes(x = date, y = new_cases)) +
geom_line(color = "blue") +
labs(title = "Evolução dos Novos Casos de COVID-19 no Brasil",
x = "Data", y = "Novos Casos") +
theme_minimal()
# Carregar pacotes
library(tidyverse)
library(lubridate)
library(zoo)
library(forecast)
# 🔹 Baixar os dados de COVID-19 do Our World in Data
url <- "https://covid.ourworldindata.org/data/owid-covid-data.csv"
dados <- read.csv(url)
# 🔹 Filtrar dados do Brasil
brasil <- dados %>%
filter(location == "Brazil") %>%
select(date, new_cases, new_deaths) %>%
mutate(date = as.Date(date))  # Converter data para formato Date
# 🔹 Calcular Média Móvel de 7 dias
#align = right ->média é calculada usando os 7 dias anteriores ao dia atual
brasil <- brasil %>%
mutate(
media_movel_casos = rollmean(new_cases, 7, fill = NA, align = "right"),
media_movel_mortes = rollmean(new_deaths, 7, fill = NA, align = "right")
)
# 🔹 Gráfico 1: Evolução dos Casos Diários 📈
ggplot(brasil, aes(x = date, y = new_cases)) +
geom_line(color = "blue") +
labs(title = "Evolução dos Novos Casos de COVID-19 no Brasil",
x = "Data", y = "Novos Casos") +
theme_minimal()
# 🔹 Gráfico 2: Evolução das Mortes Diárias 📉
ggplot(brasil, aes(x = date, y = new_deaths)) +
geom_line(color = "red") +
labs(title = "Evolução das Novas Mortes por COVID-19 no Brasil",
x = "Data", y = "Novas Mortes") +
theme_minimal()
# 🔹 Gráfico 3: Média Móvel de Casos e Mortes 📊
ggplot(brasil, aes(x = date)) +
geom_line(aes(y = media_movel_casos, color = "Casos")) +
geom_line(aes(y = media_movel_mortes, color = "Mortes")) +
scale_color_manual(values = c("Casos" = "blue", "Mortes" = "red")) +
labs(title = "Média Móvel de Casos e Mortes por COVID-19 no Brasil",
x = "Data", y = "Média Móvel") +
theme_minimal()
# 🔹 Predição de Casos Futuros com ARIMA 📈
#ts ->serie temporal- conjunto de dados ordenados
#define o inicio da série com o ano e mês mais antigo presente no conjunto de dados (brasil$date).
serie_temporal <- ts(brasil$new_cases, start = c(year(min(brasil$date)), month(min(brasil$date))), frequency = 365)
# Criar o modelo ARIMA
modelo <- auto.arima(serie_temporal)
# Prever os próximos 30 dias
previsao <- forecast(modelo, h = 30)
# 🔹 Gráfico 4: Predição dos Novos Casos
#autoplot = ggplot so que n precisa citar os elementos/cria a partir dos diferentes objetos
autoplot(previsao) +
labs(title = "Previsão de Novos Casos de COVID-19 no Brasil",
x = "Tempo", y = "Casos Previstos") +
theme_minimal()
autoplot(previsao) +
labs(title = "Previsão de Novos Casos de COVID-19 no Brasil",
x = "Tempo", y = "Casos Previstos") +
theme_minimal()
url <- "https://covid.ourworldindata.org/data/owid-covid-data.csv"
dados <- read.csv(url)
url <- "https://covid.ourworldindata.org/data/owid-covid-data.csv"
dados <- read.csv(url)
ggplot(brasil, aes(x = date)) +
geom_line(aes(y = media_movel_casos, color = "Casos")) +
geom_line(aes(y = media_movel_mortes, color = "Mortes")) +
scale_color_manual(values = c("Casos" = "blue", "Mortes" = "red")) +
labs(title = "Média Móvel de Casos e Mortes por COVID-19 no Brasil",
x = "Data", y = "Média Móvel") +
theme_minimal()
ggplot(brasil, aes(x = date, y = new_deaths)) +
geom_line(color = "red") +
labs(title = "Evolução das Novas Mortes por COVID-19 no Brasil",
x = "Data", y = "Novas Mortes") +
theme_minimal()
ggplot(brasil, aes(x = date, y = new_cases)) +
geom_line(color = "blue") +
labs(title = "Evolução dos Novos Casos de COVID-19 no Brasil",
x = "Data", y = "Novos Casos") +
theme_minimal()
autoplot(previsao) +
labs(title = "Previsão de Novos Casos de COVID-19 no Brasil",
x = "Tempo", y = "Casos Previstos") +
theme_minimal()
ggplot(brasil, aes(x = date)) +
geom_line(aes(y = media_movel_casos, color = "Casos")) +
geom_line(aes(y = media_movel_mortes, color = "Mortes")) +
scale_color_manual(values = c("Casos" = "blue", "Mortes" = "red")) +
labs(title = "Média Móvel de Casos e Mortes por COVID-19 no Brasil",
x = "Data", y = "Média Móvel") +
theme_minimal()
ggplot(brasil, aes(x = date, y = new_deaths)) +
geom_line(color = "red") +
labs(title = "Evolução das Novas Mortes por COVID-19 no Brasil",
x = "Data", y = "Novas Mortes") +
theme_minimal()
ggplot(brasil, aes(x = date)) +
geom_line(aes(y = media_movel_casos, color = "Casos")) +
geom_line(aes(y = media_movel_mortes, color = "Mortes")) +
scale_color_manual(values = c("Casos" = "blue", "Mortes" = "red")) +
labs(title = "Média Móvel de Casos e Mortes por COVID-19 no Brasil",
x = "Data", y = "Média Móvel") +
theme_minimal()
autoplot(previsao) +
labs(title = "Previsão de Novos Casos de COVID-19 no Brasil",
x = "Tempo", y = "Casos Previstos") +
theme_minimal()
ggplot() +
geom_line(data = dados_2024, aes(x = date, y = new_cases, color = "Real")) +
geom_line(aes(x = seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 365),
y = previsao$mean, color = "Previsto")) +
scale_color_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão x Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
ggplot() +
geom_line(data = dados_2024, aes(x = date, y = new_cases, color = "Real")) +
geom_line(aes(x = seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 365),
y = previsao$mean, color = "Previsto")) +
scale_color_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão x Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
# 📌 Plotando previsão vs. dados reais
ggplot() +
geom_line(data = dados_2024, aes(x = date, y = new_cases, color = "Real")) +
geom_line(aes(x = seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 365),
y = previsao$mean, color = "Previsto")) +
scale_color_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão x Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
# 📌 Carregar pacotes necessários
library(tidyverse)
library(lubridate)
library(forecast)
library(zoo)
# 📌 Suponha que o dataframe "brasil" já contenha os dados de COVID-19 com colunas: date, new_cases
# 📌 1️⃣ Filtrar apenas o período de 2021 a 2023
dados_filtrados <- brasil %>%
filter(year(date) >= 2021 & year(date) <= 2023)
# 📌 2️⃣ Criar a série temporal apenas com os dados filtrados
serie_temporal <- ts(dados_filtrados$new_cases,
start = c(2021, 1),
frequency = 365) # Dados diários
# 📌 3️⃣ Ajustar o modelo ARIMA
modelo_arima <- auto.arima(serie_temporal)
# 📌 4️⃣ Prever os casos para o ano de 2024
previsao <- forecast(modelo_arima, h = 365) # Previsão para 365 dias
# 📌 5️⃣ Plotar a previsão
autoplot(previsao) +
labs(title = "Previsão de Casos de COVID-19 para 2024",
x = "Ano", y = "Casos Diários")
# 📌 6️⃣ Comparar com os dados reais de 2024 (se disponíveis)
dados_2024 <- brasil %>%
filter(year(date) == 2024)
# 📌 Plotando previsão vs. dados reais
ggplot() +
geom_line(data = dados_2024, aes(x = date, y = new_cases, color = "Real")) +
geom_line(aes(x = seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 365),
y = previsao$mean, color = "Previsto")) +
scale_color_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão x Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
ggplot(comparacao, aes(x = date)) +
geom_bar(aes(y = new_cases_real, fill = "Real"), stat = "identity", alpha = 0.7) +
geom_bar(aes(y = new_cases_previsto, fill = "Previsto"), stat = "identity", alpha = 0.7) +
scale_fill_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão vs. Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
# 📌 Carregar pacotes necessários
library(tidyverse)
library(lubridate)
library(forecast)
library(zoo)
# 📌 Suponha que o dataframe "brasil" já contenha os dados de COVID-19 com colunas: date, new_cases
# 📌 1️⃣ Filtrar apenas o período de 2021 a 2023
dados_filtrados <- brasil %>%
filter(year(date) >= 2021 & year(date) <= 2023)
# 📌 2️⃣ Criar a série temporal apenas com os dados filtrados
serie_temporal <- ts(dados_filtrados$new_cases,
start = c(2021, 1),
frequency = 365) # Dados diários
# 📌 3️⃣ Ajustar o modelo ARIMA
modelo_arima <- auto.arima(serie_temporal)
# 📌 4️⃣ Prever os casos para o ano de 2024
previsao <- forecast(modelo_arima, h = 365) # Previsão para 365 dias
# 📌 5️⃣ Criar um dataframe com a previsão
datas_2024 <- seq.Date(from = as.Date("2024-01-01"), by = "day", length.out = 365)
dados_previstos <- data.frame(date = datas_2024, new_cases = as.numeric(previsao$mean))
# 📌 6️⃣ Comparar com os dados reais de 2024 (se disponíveis)
dados_2024 <- brasil %>%
filter(year(date) == 2024) %>%
select(date, new_cases)
# 📌 7️⃣ Juntar as previsões com os dados reais
comparacao <- full_join(dados_2024, dados_previstos, by = "date", suffix = c("_real", "_previsto"))
# 📌 8️⃣ Criar o gráfico de barras
ggplot(comparacao, aes(x = date)) +
geom_bar(aes(y = new_cases_real, fill = "Real"), stat = "identity", alpha = 0.7) +
geom_bar(aes(y = new_cases_previsto, fill = "Previsto"), stat = "identity", alpha = 0.7) +
scale_fill_manual(values = c("Real" = "blue", "Previsto" = "red")) +
labs(title = "Comparação: Previsão vs. Real - Casos de COVID-19 em 2024",
x = "Data", y = "Casos Diários") +
theme_minimal()
View(dados_previstos)
View(dados_filtrados)
# Gerar um vetor aleatório para teste
tam <- 1000
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
print(
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
)
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
library(Rcpp)
library(ggplot2)
# Carregar os algoritmos implementados em C++
sourceCpp("mergeSort.cpp")
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
library(Rcpp)
library(ggplot2)
# Carregar os algoritmos implementados em C++
sourceCpp("mergeSort.cpp")
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort(vetor))[3], Linguagem = "C++"
))
library(Rcpp)
library(ggplot2)
# Carregar os algoritmos implementados em C++
sourceCpp("mergeSort.cpp")
sourceCpp("quickSort.cpp")
sourceCpp("bubbleSort.cpp")
# Gerar um vetor aleatório para teste
tam <- 1000
vetor_original <- sample(1:10000, tam, replace = TRUE)
# Medir tempos de execução
time_results <- data.frame(Algoritmo = character(), Tempo = numeric(), Linguagem = character(), stringsAsFactors = FALSE)
# Funções de ordenação em R
bubble_sort_r <- function(v) {
for (i in seq_along(v)) {
for (j in seq_len(length(v) - i)) {
if (v[j] > v[j + 1]) {
temp <- v[j]
v[j] <- v[j + 1]
v[j + 1] <- temp
}
}
}
return(v)
}
merge_sort_r <- function(v) {
if (length(v) <= 1) return(v)
mid <- floor(length(v) / 2)
left <- merge_sort_r(v[1:mid])
right <- merge_sort_r(v[(mid + 1):length(v)])
return(merge(left, right))
}
quick_sort_r <- function(v) {
if (length(v) <= 1) return(v)
pivot <- v[1]
left <- quick_sort_r(v[v < pivot])
right <- quick_sort_r(v[v > pivot])
return(c(left, pivot, v[v == pivot][-1], right))
}
# Testando e medindo os tempos (versões em R)
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Bubble Sort", Tempo = system.time(bubble_sort_r(vetor))[3], Linguagem = "R"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Merge Sort", Tempo = system.time(merge_sort_r(vetor))[3], Linguagem = "R"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort_r(vetor))[3], Linguagem = "R"
))
# Testando e medindo os tempos (versões em C++)
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Bubble Sort", Tempo = system.time(bubbleSort(vetor))[3], Linguagem = "C++"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Merge Sort", Tempo = system.time(mergeSortR(vetor))[3], Linguagem = "C++"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort(vetor))[3], Linguagem = "C++"
))
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort(vetor))[3], Linguagem = "C++"
))
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
library(Rcpp)
library(ggplot2)
# Carregar os algoritmos implementados em C++
sourceCpp("mergeSort.cpp")
sourceCpp("quickSort.cpp")
sourceCpp("bubbleSort.cpp")
# Gerar um vetor aleatório para teste
tam <- 1000
vetor_original <- sample(1:10000, tam, replace = TRUE)
# Medir tempos de execução
time_results <- data.frame(Algoritmo = character(), Tempo = numeric(), Linguagem = character(), stringsAsFactors = FALSE)
# Funções de ordenação em R
bubble_sort_r <- function(v) {
for (i in seq_along(v)) {
for (j in seq_len(length(v) - i)) {
if (v[j] > v[j + 1]) {
temp <- v[j]
v[j] <- v[j + 1]
v[j + 1] <- temp
}
}
}
return(v)
}
merge_sort_r <- function(v) {
if (length(v) <= 1) return(v)
mid <- floor(length(v) / 2)
left <- merge_sort_r(v[1:mid])
right <- merge_sort_r(v[(mid + 1):length(v)])
return(merge(left, right))
}
quick_sort_r <- function(v) {
if (length(v) <= 1) return(v)
pivot <- v[1]
left <- quick_sort_r(v[v < pivot])
right <- quick_sort_r(v[v > pivot])
return(c(left, pivot, v[v == pivot][-1], right))
}
# Testando e medindo os tempos (versões em R)
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Bubble Sort", Tempo = system.time(bubble_sort_r(vetor))[3], Linguagem = "R"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Merge Sort", Tempo = system.time(merge_sort_r(vetor))[3], Linguagem = "R"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort_r(vetor))[3], Linguagem = "R"
))
# Testando e medindo os tempos (versões em C++)
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Bubble Sort", Tempo = system.time(bubbleSort(vetor))[3], Linguagem = "C++"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Merge Sort", Tempo = system.time(mergeSortR(vetor))[3], Linguagem = "C++"
))
vetor <- vetor_original
time_results <- rbind(time_results, data.frame(
Algoritmo = "Quick Sort", Tempo = system.time(quick_sort(vetor))[3], Linguagem = "C++"
))
ggplot(time_results, aes(x = Algoritmo, y = Tempo, group = Linguagem, color = Linguagem)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_text(aes(label = round(Tempo, 2)), vjust = -0.5, size = 3) +
labs(
title = "Comparação de Tempo de Execução dos Algoritmos de Ordenação",
x = "Algoritmo",
y = "Tempo (segundos)"
) +
theme_minimal()
library(Rcpp)
library(ggplot2)
# Carregar os algoritmos implementados em C++
sourceCpp("mergeSort.cpp")
sourceCpp("quickSort.cpp")
sourceCpp("bubbleSort.cpp")
# Solicitar tamanho do vetor ao usuário
tam <- as.integer(readline(prompt = "Digite o tamanho do vetor: "))
# Gerar um vetor aleatório para teste
vetor_original <- sample(1:10000, tam, replace = TRUE)
source("ordenacao.R")
source("main.R")
source("main.r")
source("main.R")
getwd()
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
getwd()
setwd("C:/Users/Paulo Henrique/Documents/projetoRca")
source("main.R")
getwd()
